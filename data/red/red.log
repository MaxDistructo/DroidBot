[12/01/2017 15:31] ERROR red load_cogs 556: imgurpython is not installed. Do 'pip3 install imgurpython' to use this cog.
Traceback (most recent call last):
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/image.py", line 108, in setup
    from imgurpython import ImgurClient
ImportError: No module named 'imgurpython'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "red.py", line 553, in load_cogs
    owner_cog._load_cog(extension)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/owner.py", line 798, in _load_cog
    self.bot.load_extension(mod_obj.__name__)
  File "/usr/local/lib/python3.5/dist-packages/discord/ext/commands/bot.py", line 724, in load_extension
    lib.setup(self)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/image.py", line 110, in setup
    raise ModuleNotFound("imgurpython is not installed. Do 'pip3 install imgurpython' to use this cog.")
cogs.image.ModuleNotFound: imgurpython is not installed. Do 'pip3 install imgurpython' to use this cog.
[12/01/2017 18:16] ERROR red on_command_error 361: Exception in command 'info'
Traceback (most recent call last):
  File "/usr/local/lib/python3.5/dist-packages/discord/ext/commands/core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/owner.py", line 759, in info
    embed = discord.Embed(colour=discord.Colour.red())
AttributeError: module 'discord' has no attribute 'Embed'
[12/01/2017 18:16] ERROR red on_command_error 361: Exception in command 'info'
Traceback (most recent call last):
  File "/usr/local/lib/python3.5/dist-packages/discord/ext/commands/core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/owner.py", line 759, in info
    embed = discord.Embed(colour=discord.Colour.red())
AttributeError: module 'discord' has no attribute 'Embed'
[12/01/2017 18:17] ERROR red on_command_error 361: Exception in command 'info'
Traceback (most recent call last):
  File "/usr/local/lib/python3.5/dist-packages/discord/ext/commands/core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/owner.py", line 759, in info
    embed = discord.Embed(colour=discord.Colour.red())
AttributeError: module 'discord' has no attribute 'Embed'
[12/01/2017 18:34] INFO mod user 538: MaxDistructo(228111371965956099) deleted 21 messages  made by MaxDistructo(228111371965956099) in channel bots
[12/01/2017 18:35] INFO mod cleanup_bot 673: MaxDistructo(228111371965956099) deleted 20  command messages in channel bots
[12/01/2017 18:37] INFO mod user 538: MaxDistructo(228111371965956099) deleted 9 messages  made by MaxDistructo(228111371965956099) in channel bots
[12/01/2017 18:37] INFO mod user 538: MaxDistructo(228111371965956099) deleted 5 messages  made by Lufia, Over And Out(83004494186549248) in channel bots
[12/01/2017 20:23] INFO mod user 538: MaxDistructo(228111371965956099) deleted 2 messages  made by MaxDistructo(228111371965956099) in channel bots
[12/01/2017 20:23] INFO mod cleanup_bot 673: MaxDistructo(228111371965956099) deleted 3  command messages in channel bots
[12/01/2017 20:23] INFO mod cleanup_bot 673: MaxDistructo(228111371965956099) deleted 2  command messages in channel bots
[12/01/2017 20:24] INFO mod cleanup_bot 673: MaxDistructo(228111371965956099) deleted 4  command messages in channel music
[13/01/2017 20:34] INFO mod cleanup_bot 673: MaxDistructo(228111371965956099) deleted 10  command messages in channel music
[13/01/2017 20:34] INFO mod user 538: MaxDistructo(228111371965956099) deleted 34 messages  made by MaxDistructo(228111371965956099) in channel music
[13/01/2017 20:35] INFO mod user 538: MaxDistructo(228111371965956099) deleted 7 messages  made by Lufia, Over And Out(83004494186549248) in channel music
[13/01/2017 21:39] INFO mod user 538: MaxDistructo(228111371965956099) deleted 7 messages  made by Toasty with internet!(162399111377584128) in channel general
[13/01/2017 21:39] INFO mod user 538: MaxDistructo(228111371965956099) deleted 14 messages  made by MaxDistructo(228111371965956099) in channel general
[13/01/2017 21:39] INFO mod user 538: MaxDistructo(228111371965956099) deleted 3 messages  made by Lufia, Over And Out(83004494186549248) in channel general
[13/01/2017 21:40] INFO mod cleanup_bot 673: MaxDistructo(228111371965956099) deleted 13  command messages in channel general
[13/01/2017 21:45] INFO economy _set 393: MaxDistructo(228111371965956099) set 1000000000 credits to MaxDistructo (228111371965956099)
[13/01/2017 21:47] INFO economy _set 393: MaxDistructo(228111371965956099) set 1000000000 credits to Toasty with internet! (162399111377584128)
[13/01/2017 21:49] INFO economy _set 380: MaxDistructo(228111371965956099) added 1 credits to MaxDistructo (228111371965956099)
[13/01/2017 21:52] INFO economy _set 393: Lufia, Over And Out(83004494186549248) set 5000000 credits to Lufia, Over And Out (83004494186549248)
[13/01/2017 21:55] INFO economy _set 380: MaxDistructo(228111371965956099) added 1000000 credits to MaxDistructo (228111371965956099)
[13/01/2017 21:56] INFO economy _set 393: MaxDistructo(228111371965956099) set 1000000000 credits to Lufia, Over And Out (83004494186549248)
[13/01/2017 22:26] ERROR owner load 75: You're missing the cleverbot library.
Install it with: 'pip3 install cleverbot' and reload the module.
Traceback (most recent call last):
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/owner.py", line 65, in load
    self._load_cog(module)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/owner.py", line 798, in _load_cog
    self.bot.load_extension(mod_obj.__name__)
  File "/usr/local/lib/python3.5/dist-packages/discord/ext/commands/bot.py", line 740, in load_extension
    lib.setup(self)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/cleverbot.py", line 76, in setup
    raise RuntimeError("You're missing the cleverbot library.\n"
RuntimeError: You're missing the cleverbot library.
Install it with: 'pip3 install cleverbot' and reload the module.
[13/01/2017 22:34] ERROR owner load 75: You need to run 'pip3 install beautifulsoup4' in command prompt.
Traceback (most recent call last):
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/owner.py", line 65, in load
    self._load_cog(module)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/owner.py", line 798, in _load_cog
    self.bot.load_extension(mod_obj.__name__)
  File "/usr/local/lib/python3.5/dist-packages/discord/ext/commands/bot.py", line 740, in load_extension
    lib.setup(self)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/pokedex.py", line 377, in setup
    raise RuntimeError("You need to run \'pip3 install beautifulsoup4\' in command prompt.")
RuntimeError: You need to run 'pip3 install beautifulsoup4' in command prompt.
[13/01/2017 22:38] ERROR owner load 75: You need to run 'pip3 install tabulate'
Traceback (most recent call last):
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/owner.py", line 65, in load
    self._load_cog(module)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/owner.py", line 798, in _load_cog
    self.bot.load_extension(mod_obj.__name__)
  File "/usr/local/lib/python3.5/dist-packages/discord/ext/commands/bot.py", line 740, in load_extension
    lib.setup(self)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/casino.py", line 2183, in setup
    raise RuntimeError("You need to run 'pip3 install tabulate'")
RuntimeError: You need to run 'pip3 install tabulate'
[15/01/2017 16:16] ERROR red load_cogs 556: You need to run 'pip3 install beautifulsoup4' in command prompt.
Traceback (most recent call last):
  File "red.py", line 553, in load_cogs
    owner_cog._load_cog(extension)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/owner.py", line 798, in _load_cog
    self.bot.load_extension(mod_obj.__name__)
  File "/usr/local/lib/python3.5/dist-packages/discord/ext/commands/bot.py", line 740, in load_extension
    lib.setup(self)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/pokedex.py", line 377, in setup
    raise RuntimeError("You need to run \'pip3 install beautifulsoup4\' in command prompt.")
RuntimeError: You need to run 'pip3 install beautifulsoup4' in command prompt.
[15/01/2017 16:38] INFO mod cleanup_bot 673: MaxDistructo - Droid(228111371965956099) deleted 51  command messages in channel bots
[15/01/2017 16:39] INFO mod user 538: MaxDistructo - Droid(228111371965956099) deleted 21 messages  made by MaxDistructo - Droid(228111371965956099) in channel bots
[15/01/2017 16:39] INFO mod cleanup_bot 673: MaxDistructo - Droid(228111371965956099) deleted 51  command messages in channel bots
[16/01/2017 13:42] ERROR red on_command_error 361: Exception in command 'casino join'
Traceback (most recent call last):
  File "/usr/local/lib/python3.5/dist-packages/discord/ext/commands/core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/casino.py", line 334, in _join_casino
    self.casino_bank.create_account(user)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/casino.py", line 116, in create_account
    raise UserAlreadyRegistered("{} already has a casino membership".format(user.name))
cogs.casino.UserAlreadyRegistered: Lufia LEEROYJENKINS already has a casino membership
[16/01/2017 13:55] INFO casino _paydaytimer_setcasino 1263: SETTINGS CHANGED MaxDistructo(228111371965956099) MaxDistructo set the default payday to 1 minute.
[16/01/2017 14:01] INFO casino _paydaytimer_setcasino 1263: SETTINGS CHANGED Toasty(162399111377584128) Toasty set the default payday to 3 seconds.
[16/01/2017 14:04] ERROR red on_command_error 361: Exception in command 'casino join'
Traceback (most recent call last):
  File "/usr/local/lib/python3.5/dist-packages/discord/ext/commands/core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/casino.py", line 334, in _join_casino
    self.casino_bank.create_account(user)
  File "/home/ubuntu/workspace/Red-DiscordBot/cogs/casino.py", line 116, in create_account
    raise UserAlreadyRegistered("{} already has a casino membership".format(user.name))
cogs.casino.UserAlreadyRegistered: MaxDistructo already has a casino membership
[16/01/2017 17:26] INFO mod cleanup_bot 673: MaxDistructo(228111371965956099) deleted 336  command messages in channel bots
[16/01/2017 21:24] INFO mod user 538: MaxDistructo(228111371965956099) deleted 52 messages  made by MaxDistructo(228111371965956099) in channel bots
[16/01/2017 21:24] INFO mod cleanup_bot 673: MaxDistructo(228111371965956099) deleted 15  command messages in channel bots
[16/01/2017 21:24] INFO mod user 538: MaxDistructo(228111371965956099) deleted 29 messages  made by Lufia LEEROYJENKINS(83004494186549248) in channel bots
[16/01/2017 21:24] INFO mod user 538: MaxDistructo(228111371965956099) deleted 21 messages  made by Toasty(162399111377584128) in channel bots
[16/01/2017 21:25] INFO mod user 538: Lufia LEEROYJENKINS(83004494186549248) deleted 2 messages  made by Lufia LEEROYJENKINS(83004494186549248) in channel bots
[16/01/2017 21:25] INFO mod messages 613: MaxDistructo(228111371965956099) deleted 50000 messages in channel bots
[16/01/2017 21:27] INFO mod messages 613: MaxDistructo(228111371965956099) deleted 500000 messages in channel bots
[16/01/2017 21:28] INFO economy _set 380: MaxDistructo(228111371965956099) added 10000000 credits to MaxDistructo (228111371965956099)
[16/01/2017 21:29] INFO mod messages 613: MaxDistructo(228111371965956099) deleted 500000 messages in channel bots
[16/01/2017 21:35] INFO mod messages 613: MaxDistructo(228111371965956099) deleted 500000 messages in channel bots
[16/01/2017 21:36] INFO mod messages 613: MaxDistructo(228111371965956099) deleted 500000 messages in channel bots
[16/01/2017 21:43] INFO mod messages 613: MaxDistructo(228111371965956099) deleted 500000 messages in channel general
[16/01/2017 21:53] INFO mod messages 613: MaxDistructo(228111371965956099) deleted 500000 messages in channel general
[16/01/2017 21:55] INFO mod messages 613: MaxDistructo(228111371965956099) deleted 500000 messages in channel general
[17/01/2017 13:48] INFO mod messages 613: MaxDistructo(228111371965956099) deleted 500000 messages in channel bots
[08/03/2017 10:04] ERROR red load_cogs 562: You need to run 'pip3 install beautifulsoup4' in command prompt.
Traceback (most recent call last):
  File "red.py", line 559, in load_cogs
    owner_cog._load_cog(extension)
  File "C:\Users\mican\Documents\Red-DiscordBot\cogs\owner.py", line 799, in _load_cog
    self.bot.load_extension(mod_obj.__name__)
  File "lib\discord\ext\commands\bot.py", line 738, in load_extension
    lib.setup(self)
  File "C:\Users\mican\Documents\Red-DiscordBot\cogs\pokedex.py", line 377, in setup
    raise RuntimeError("You need to run \'pip3 install beautifulsoup4\' in command prompt.")
RuntimeError: You need to run 'pip3 install beautifulsoup4' in command prompt.
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 775, in create_connection
    raise exceptions[0]
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 762, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
OSError: [Errno 10065] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10065] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 592, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 452, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=resume)
  File "lib\discord\gateway.py", line 193, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 631, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10065] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[08/03/2017 19:11] ERROR red load_cogs 562: HTTPConnectionPool(host='www.cleverbot.com', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x000001DF75E5AE48>: Failed to establish a new connection: [Errno 11001] getaddrinfo failed',))
Traceback (most recent call last):
  File "lib\requests\packages\urllib3\connection.py", line 141, in _new_conn
    (self.host, self.port), self.timeout, **extra_kw)
  File "lib\requests\packages\urllib3\util\connection.py", line 60, in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "lib\requests\packages\urllib3\connectionpool.py", line 600, in urlopen
    chunked=chunked)
  File "lib\requests\packages\urllib3\connectionpool.py", line 356, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\http\client.py", line 1107, in request
    self._send_request(method, url, body, headers)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\http\client.py", line 1152, in _send_request
    self.endheaders(body)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\http\client.py", line 1103, in endheaders
    self._send_output(message_body)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\http\client.py", line 934, in _send_output
    self.send(msg)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\http\client.py", line 877, in send
    self.connect()
  File "lib\requests\packages\urllib3\connection.py", line 166, in connect
    conn = self._new_conn()
  File "lib\requests\packages\urllib3\connection.py", line 150, in _new_conn
    self, "Failed to establish a new connection: %s" % e)
requests.packages.urllib3.exceptions.NewConnectionError: <requests.packages.urllib3.connection.HTTPConnection object at 0x000001DF75E5AE48>: Failed to establish a new connection: [Errno 11001] getaddrinfo failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "lib\requests\adapters.py", line 423, in send
    timeout=timeout
  File "lib\requests\packages\urllib3\connectionpool.py", line 649, in urlopen
    _stacktrace=sys.exc_info()[2])
  File "lib\requests\packages\urllib3\util\retry.py", line 376, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
requests.packages.urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='www.cleverbot.com', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x000001DF75E5AE48>: Failed to establish a new connection: [Errno 11001] getaddrinfo failed',))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "red.py", line 559, in load_cogs
    owner_cog._load_cog(extension)
  File "C:\Users\mican\Documents\Red-DiscordBot\cogs\owner.py", line 799, in _load_cog
    self.bot.load_extension(mod_obj.__name__)
  File "lib\discord\ext\commands\bot.py", line 738, in load_extension
    lib.setup(self)
  File "C:\Users\mican\Documents\Red-DiscordBot\cogs\cleverbot.py", line 81, in setup
    n = Cleverbot(bot)
  File "C:\Users\mican\Documents\Red-DiscordBot\cogs\cleverbot.py", line 20, in __init__
    self.clv = clv.Cleverbot()
  File "lib\cleverbot\cleverbot.py", line 84, in __init__
    self.session.get(Cleverbot.PROTOCOL + Cleverbot.HOST)
  File "lib\requests\sessions.py", line 501, in get
    return self.request('GET', url, **kwargs)
  File "lib\requests\sessions.py", line 488, in request
    resp = self.send(prep, **send_kwargs)
  File "lib\requests\sessions.py", line 609, in send
    r = adapter.send(request, **kwargs)
  File "lib\requests\adapters.py", line 487, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='www.cleverbot.com', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x000001DF75E5AE48>: Failed to establish a new connection: [Errno 11001] getaddrinfo failed',))
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:11] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:12] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:13] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:13] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:13] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:13] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:13] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 19:13] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 775, in create_connection
    raise exceptions[0]
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 762, in create_connection
    yield from self.sock_connect(sock, address)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 451, in sock_connect
    return (yield from fut)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 481, in _sock_connect_cb
    raise OSError(err, 'Connect call failed %s' % (address,))
OSError: [Errno 10051] Connect call failed ('104.16.58.5', 443)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10051] Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10051] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [Connect call failed ('104.16.58.5', 443)]]
[08/03/2017 19:54] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 589, in _create_direct_connection
    hosts = yield from self._resolve_host(req.host, req.port)
  File "lib\aiohttp\connector.py", line 561, in _resolve_host
    self._resolver.resolve(host, port, family=self._family)
  File "lib\aiohttp\resolver.py", line 29, in resolve
    host, port, type=socket.SOCK_STREAM, family=family)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\concurrent\futures\thread.py", line 55, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\socket.py", line 733, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 588, in main
    bot=not bot.settings.self_bot)
  File "lib\discord\client.py", line 416, in login
    yield from getattr(self, '_login_' + str(n))(*args, **kwargs)
  File "lib\discord\client.py", line 346, in _login_1
    data = yield from self.http.static_login(token, bot=is_bot)
  File "lib\discord\http.py", line 256, in static_login
    data = yield from self.request(Route('GET', '/users/@me'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 11001] Cannot connect to host discordapp.com:443 ssl:True [getaddrinfo failed]
[08/03/2017 20:01] ERROR red <module> 622: Fatal exception, attempting graceful logout
Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 601, in _create_direct_connection
    local_addr=self._local_addr)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 801, in create_connection
    sock, protocol_factory, ssl, server_hostname)
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 827, in _create_connection_transport
    yield from waiter
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 380, in __iter__
    yield self  # This tells Task to wait for completion.
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 304, in _wakeup
    future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\selector_events.py", line 723, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "lib\aiohttp\connector.py", line 304, in connect
    yield from self._create_connection(req)
  File "lib\aiohttp\connector.py", line 578, in _create_connection
    transport, proto = yield from self._create_direct_connection(req)
  File "lib\aiohttp\connector.py", line 624, in _create_direct_connection
    (req.host, req.port, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10054] Can not connect to discordapp.com:443 [An existing connection was forcibly closed by the remote host]

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "red.py", line 603, in <module>
    loop.run_until_complete(main(bot))
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\futures.py", line 293, in result
    raise self._exception
  File "C:\Users\mican\AppData\Local\Programs\Python\Python35\lib\asyncio\tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "red.py", line 592, in main
    yield from bot.connect()
  File "lib\discord\client.py", line 452, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=resume)
  File "lib\discord\gateway.py", line 193, in from_client
    gateway = yield from client.http.get_gateway()
  File "lib\discord\http.py", line 631, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "lib\discord\http.py", line 136, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "lib\aiohttp\client.py", line 555, in __iter__
    resp = yield from self._coro
  File "lib\aiohttp\client.py", line 198, in _request
    conn = yield from self._connector.connect(req)
  File "lib\aiohttp\connector.py", line 314, in connect
    .format(key, exc.strerror)) from exc
aiohttp.errors.ClientOSError: [Errno 10054] Cannot connect to host discordapp.com:443 ssl:True [Can not connect to discordapp.com:443 [An existing connection was forcibly closed by the remote host]]
[21/04/2017 16:54] ERROR red on_command_error 376: Exception in command 'cleanup bot'
Traceback (most recent call last):
  File "lib\discord\ext\commands\core.py", line 50, in wrapped
    ret = yield from coro(*args, **kwargs)
  File "C:\Users\mican\Documents\Red-DiscordBot\cogs\mod.py", line 925, in cleanup_bot
    await self.mass_purge(to_delete)
  File "C:\Users\mican\Documents\Red-DiscordBot\cogs\mod.py", line 1286, in mass_purge
    await self.bot.delete_messages(messages[:100])
  File "lib\discord\client.py", line 1302, in delete_messages
    yield from self.http.delete_messages(channel.id, message_ids, guild_id)
  File "lib\discord\http.py", line 200, in request
    raise HTTPException(r, data)
discord.errors.HTTPException: BAD REQUEST (status code: 400): You can only bulk delete messages that are under 14 days old.
